# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O0lsDfSZdyC8Nc11vXxfJTLv3j_X0xcb

# Import
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install geopandas
# %pip install contextily

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import statsmodels.api as sm
from statsmodels.formula.api import ols
import geopandas as gpd
import descartes
import contextily as ctx


pd.options.mode.chained_assignment = None  # default='warn'
sns.set(context='talk', style='white', rc={'figure.facecolor':'white'}, font_scale=1)
sns.set_style('ticks')

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

root_dir = "/content/gdrive/My Drive/"
base_dir = root_dir + "horizons-drishti"

#root_dir = "/content/gdrive/My Drive/"
#base_dir = root_dir + "UCLA/other/horizons-drishti" ## change this directory

def concat_dataframes(start_number, stop_number, phase):

    df = pd.DataFrame()

    for i in range(start_number, stop_number+1):

        week_number = i

        if i < 10:
            week_number = f"0{i}"

        if  i >= 22:
            file_name = f"{base_dir}/Data/pulse2021_puf_{week_number}.csv"
        else:
          file_name = f"{base_dir}/Data/pulse2020_puf_{week_number}.csv"

        week = pd.read_csv(file_name)

        week["week_number"] = i
        week["phase"] = phase


        df = df.append(week, ignore_index=True)

    return df

phase1 = concat_dataframes(1, 12, "phase1")
phase2 = concat_dataframes(13, 17, "phase2")
phase3 = concat_dataframes(18, 27, "phase3")
phase3_1 = concat_dataframes(28, 33, "phase3.1")
phase3_2 = concat_dataframes(34, 39, "phase3.2")

phase1["race_recoded"] = np.where(phase1["RHISPANIC"] == 2, 5, phase1["RRACE"])

phase1["anxiety_binary"] = np.where(phase1["ANXIOUS"].isin([1, 2]), "low anxiety", "high anxiety")

phase1["anxiety_ternary"] = np.where(phase1["ANXIOUS"] == 1, "low anxiety",
                                     np.where(phase1["ANXIOUS"].isin([2, 3]), "medium anxiety", "high anxiety"))

phase1["anxiety_ternary"]

first_phases=pd.concat([phase1, phase2])

first_phases

#pd.concat(phase1[ (list of columns to keep) ], phase2[ (list of columns to keep) ])

all_phases=pd.concat([phase1[["EGENDER", "RRACE"]], phase2[["EGENDER", "RRACE"]]], ignore_index=True, axis=0)

all_phases

all_phases=pd.concat([phase1, phase2, phase3, phase3_1, phase3_2])

phase1

df1.loc[0]

"""# Phases Info

Phase 1
"""

df2 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_02.csv")
df3 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_03.csv")
df4 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_04.csv")
df5 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_05.csv")
df6 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_06.csv")
df7 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_07.csv")
df8 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_08.csv")
df9 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_09.csv")
df10 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_10.csv")
df11 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_11.csv")
df12 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_12.csv")

"""Phase 2"""

df13 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_13.csv")
df14 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_14.csv")
df15 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_15.csv")
df16 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_16.csv")
df17 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_17.csv")

"""Phase 3"""

df18 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_18.csv")
df19 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_19.csv")
df20 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_20.csv")
df21 = pd.read_csv(f"{base_dir}/Data/pulse2020_puf_21.csv")
df22 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_22.csv")
df23 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_23.csv")
df24 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_24.csv")
df25 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_25.csv")
df26 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_26.csv")
df27 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_27.csv")

"""Phase 3.1"""

df28 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_28.csv")
df29 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_29.csv")
df30 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_30.csv")
df31 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_31.csv")
df32 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_32.csv")
df33 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_33.csv")

"""Phase 3.2"""

len(list(df1))

df34 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_34.csv")
df35 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_35.csv")
df36 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_36.csv")
df37 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_37.csv")
df38 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_38.csv")
df39 = pd.read_csv(f"{base_dir}/Data/pulse2021_puf_39.csv")

sns.histplot(x="TBIRTH_YEAR", data=df1, bins=100, color="magenta")
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

sns.histplot(x="TBIRTH_YEAR", data=df2, bins=100, color="green")
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

sns.histplot(x="EST_ST", data=df1, bins=100, color="magenta")
plt.xlabel("state")
plt.ylabel("number of respondents")
plt.show()

sns.histplot(x="EST_ST", data=df39, bins=100, color="green")
plt.xlabel("state")
plt.ylabel("number of respondents")
plt.show()

"""# Demographic Analysis"""

phase1_id_count = phase1.groupby("EST_ST")["SCRAM"].nunique().reset_index()

plt.figure(figsize=(12, 3))
sns.barplot(x="EST_ST", y="SCRAM", data=phase1_id_count)
plt.xticks(rotation=90)
plt.xlabel("state")
plt.ylabel("number of unique IDs")
# plt.tight_layout()
plt.show()

phase1_id_count

test = phase1[phase1["EST_ST"] == 1].head(n=100)

test["EGENDER"]

def get_proportion(values, nums):
    proportions = values.value_counts(normalize=True).reset_index()
    proportions.columns = ["sex", "proportions"]
    prop2 = proportions[proportions["sex"] == nums]["proportions"].values[0]

    return prop2

prop_2_df = phase1.groupby("EST_ST")["EGENDER"].apply(get_proportion, nums=2).reset_index()

prop_2_df.columns = ["state", "proportion = 2"]

plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 2", data=prop_2_df)

def get_proportions(values):
    proportions = values.value_counts(normalize=True).reset_index()
    proportions.columns = ["sex", "proportions"]
    # print(proportions)

    prop2 = proportions[proportions["sex"] == 2]["proportions"].values[0]
    # print(proportions[proportions["sex"] == 2]["proportions"].values[0])
    # print(prop2.value)
    # print()

    return prop2

prop_2_df = phase1.groupby(["EST_ST", "RRACE"])["EGENDER"].apply(get_proportion).reset_index()

sns.boxplot(x="RRACE", y="TBIRTH_YEAR", data=phase1)

phase1.groupby(["EST_ST", "RRACE", "EGENDER"])["TBIRTH_YEAR"].mean().reset_index()

sns.histplot(x="TBIRTH_YEAR", hue="RRACE",  data=phase1, bins=100, palette=sns.color_palette("Set2", phase1["RRACE"].nunique()))
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

sns.countplot(x="RRACE", hue="EGENDER",  data=phase1, palette=sns.color_palette("Set2", phase1["EGENDER"].nunique()))
plt.xlabel("race")
plt.ylabel("number of respondents")
plt.show()



phase1[phase1["EST_ST"] == 1]

prop_r2_df = phase1.groupby(["EST_ST", "RRACE"])["EGENDER"].apply(get_proportion).reset_index()
prop_r2_df.columns = ["state", "race", "proportion = 2"]
plt.figure(figsize=(15, 3))
sns.barplot(x="state", y="proportion = 2", data=prop_r2_df)

sns.boxplot(x="EGENDER", y="TBIRTH_YEAR", data=phase1)

prop_hispanic_df = phase1.groupby("EST_ST")["RHISPANIC"].apply(get_proportion).reset_index()

prop_hispanic_df.columns = ["state", "proportion = 2"]

plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 2", data=prop_hispanic_df)

phase1.groupby(["EST_ST", "RRACE", "EGENDER"])["ANXIOUS"].mean().reset_index()

df = phase1[~phase1["ANXIOUS"].isin([-99, -88])]
df.groupby(["EST_ST", "RRACE", "EGENDER"])["ANXIOUS"].median().reset_index()

prop_hispanicS_df = phase1.groupby("TBIRTH_YEAR")["RHISPANIC"].apply(get_proportion).reset_index()
prop_hispanicS_df.columns = ["year", "proportion = 2"]

sns.relplot(x="year", y="proportion = 2", data=prop_hispanicS_df);

prop_hispanicS_df = phase1.groupby("TBIRTH_YEAR")["race_recoded"].apply(get_proportion).reset_index()

prop_sex = phase1.groupby("TBIRTH_YEAR")["EGENDER"].apply(get_proportions).reset_index()
prop_sex.columns = ["year", "proportion = 2"]
prop_sex_male=phase1.groupby("TBIRTH_YEAR")["EGENDER"].apply(get_proportion, nums=1).reset_index()
prop_sex_male.columns = ["year", "proportion = 1"]

sns.relplot(x="year", y="proportion = 2", data=prop_sex);

sns.relplot(x="year", y="proportion = 1", data=prop_sex_male);

phase1_mean_age=phase1.groupby("EST_ST")["TBIRTH_YEAR"].mean().reset_index()
phase1_mean_age.columns = ["state", "mean age"]

plt.figure(figsize=(15, 3))
sns.barplot(x="state", y="mean age", data=phase1_mean_age)

phase1_mean_age

phase1_med_age=phase1.groupby("EST_ST")["TBIRTH_YEAR"].median().reset_index()
phase1_med_age.columns = ["state", "median age"]

plt.figure(figsize=(15, 3))
sns.barplot(x="state", y="median age", data=phase1_med_age)

def race_proportions (phase, var_num):
  prop_temp=pd.DataFrame()
  prop_temp=phase.groupby("EST_ST")["race_recoded"].apply(get_proportion, nums=var_num).reset_index()
  return prop_temp

prop_race1=phase1.groupby("EST_ST")["race_recoded"].apply(get_proportion, nums=1).reset_index()
prop_race1.columns=["state","proportion = 1"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 1", data=prop_race1)

prop_race5 = race_proportions(phase1, 5)
prop_race5.columns=["state","proportion = 5"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 5", data=prop_race5)

prop_race2 = race_proportions(phase1, 2)
prop_race2.columns=["state","proportion = 2"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 2", data=prop_race2)

prop_race3 = race_proportions(phase1, 3)
prop_race3.columns=["state","proportion = 3"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 3", data=prop_race3)

prop_race4 = race_proportions(phase1, 4)
prop_race4.columns=["state","proportion = 4"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 4", data=prop_race4)

sns.countplot(x="EST_ST", hue="RRACE",  data=phase1, palette=sns.color_palette("Set2", phase1["RRACE"].nunique()))
plt.xlabel("race")
plt.ylabel("number of respondents")
plt.show()

def race_proportionsbyyear (phase, var_num):
  prop_temp=pd.DataFrame()
  prop_temp=phase.groupby("TBIRTH_YEAR")["race_recoded"].apply(get_proportion, nums=var_num).reset_index()
  return prop_temp

prop_agerace1=race_proportionsbyyear(phase1, 1)
prop_agerace1.columns=["year","proportions=1"]
plt.figure(figsize=(12, 3))
sns.relplot(x="year", y="proportions=1", data=prop_agerace1)

prop_agerace2=race_proportionsbyyear(phase1, 2)
prop_agerace2.columns=["year","proportions=2"]
plt.figure(figsize=(12, 3))
sns.relplot(x="year", y="proportions=2", data=prop_agerace2)

prop_agerace3=race_proportionsbyyear(phase1, 3)
prop_agerace3.columns=["year","proportions=3"]
plt.figure(figsize=(12, 3))
sns.relplot(x="year", y="proportions=3", data=prop_agerace3)

prop_agerace4=race_proportionsbyyear(phase1, 4)
prop_agerace4.columns=["year","proportions=4"]
plt.figure(figsize=(12, 3))
sns.relplot(x="year", y="proportions=4", data=prop_agerace4)

prop_agerace5=race_proportionsbyyear(phase1, 5)
prop_agerace5.columns=["year","proportions=5"]
plt.figure(figsize=(12, 3))
sns.relplot(x="year", y="proportions=5", data=prop_agerace5)

"""# Anxiety"""

phase1_cleaned=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
prop_anxiety_sex2 = phase1_cleaned.groupby("ANXIOUS")["EGENDER"].apply(get_proportion, nums=2).reset_index()
prop_anxiety_sex2["name"]="female"
prop_anxiety_sex2

prop_anxiety_sex1 = phase1_cleaned.groupby("ANXIOUS")["EGENDER"].apply(get_proportion, nums=1).reset_index()
prop_anxiety_sex1["name"]="male"
prop_anxiety_sex1

plt.bar(prop_anxiety_sex1['ANXIOUS'], prop_anxiety_sex1['EGENDER'], label='Men')
plt.bar(prop_anxiety_sex2['ANXIOUS'], prop_anxiety_sex2['EGENDER'], bottom=prop_anxiety_sex1['EGENDER'], label='Women')
plt.legend(bbox_to_anchor=(1.1, 1.05))

females = phase1_cleaned[phase1_cleaned["EGENDER"] == 2]["ANXIOUS"].values
males = phase1_cleaned[phase1_cleaned["EGENDER"] == 1]["ANXIOUS"].values

stats.ttest_ind(females, males)

phase1_cleaned=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
phase1_cleaned["anxiety_ternary"] = np.where(phase1_cleaned["ANXIOUS"] == 1, "low anxiety",
                                     np.where(phase1_cleaned["ANXIOUS"].isin([2, 3]), "medium anxiety", "high anxiety"))

prop_anxiety_sex2 = phase1_cleaned.groupby("anxiety_ternary")["EGENDER"].apply(get_proportion, nums=2).reset_index()
prop_anxiety_sex2["name"]="female"
prop_anxiety_sex2

prop_anxiety_sex1 = phase1_cleaned.groupby("anxiety_ternary")["EGENDER"].apply(get_proportion, nums=1).reset_index()
prop_anxiety_sex1["name"]="male"
prop_anxiety_sex1

plt.bar(prop_anxiety_sex1['anxiety_ternary'], prop_anxiety_sex1['anxiety_ternary'], label='Men')
plt.bar(prop_anxiety_sex2['anxiety_ternary'], prop_anxiety_sex2['anxiety_ternary'], bottom=prop_anxiety_sex1['EGENDER'], label='Women')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase1_cleaned=phase1[~phase1["DOWN"].isin([-99, -88])]
prop_depression_sex2 = phase1_cleaned.groupby("DOWN")["EGENDER"].apply(get_proportion, nums=2).reset_index()
prop_depression_sex2["name"]="female"
prop_depression_sex2

prop_depression_sex1 = phase1_cleaned.groupby("DOWN")["EGENDER"].apply(get_proportion, nums=1).reset_index()
prop_depression_sex1["name"]="male"
prop_depression_sex1

plt.bar(prop_depression_sex1['DOWN'], prop_depression_sex1['EGENDER'], label='Men')
plt.bar(prop_depression_sex2['DOWN'], prop_depression_sex2['EGENDER'], bottom=prop_depression_sex1['EGENDER'], label='Women')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase1_cleaned_dep=phase1[~phase1["DOWN"].isin([-99, -88])]
females_dep = phase1_cleaned_dep[phase1_cleaned_dep["EGENDER"] == 2]["DOWN"].values
males_dep = phase1_cleaned_dep[phase1_cleaned_dep["EGENDER"] == 1]["DOWN"].values
stats.ttest_ind(females_dep, males_dep)

phase1_cleaned_dep=phase1[~phase1["DOWN"].isin([-99, -88])]
race1d=phase1_cleaned_dep[phase1_cleaned_dep["race_recoded"]==1]["DOWN"].values
race2d=phase1_cleaned_dep[phase1_cleaned_dep["race_recoded"]==2]["DOWN"].values
race3d=phase1_cleaned_dep[phase1_cleaned_dep["race_recoded"]==3]["DOWN"].values
race4d=phase1_cleaned_dep[phase1_cleaned_dep["race_recoded"]==4]["DOWN"].values
race5d=phase1_cleaned_dep[phase1_cleaned_dep["race_recoded"]==5]["DOWN"].values

stats.f_oneway(race1d,race2d,race3d,race4d,race5d)

phase1_cleaned_dep["dep_binary"] = np.where(phase1_cleaned_dep["DOWN"].isin([1, 2]), 1, 2)
prop_dep_high = phase1_cleaned_dep.groupby("race_recoded")["dep_binary"].apply(get_proportion, nums=2).reset_index()
prop_dep_high["name"]="high"
prop_dep_low = phase1_cleaned_dep.groupby("race_recoded")["dep_binary"].apply(get_proportion, nums=1).reset_index()
prop_dep_low["name"]="low"
prop_dep_low

plt.bar(prop_dep_low['race_recoded'], prop_dep_low['dep_binary'], label='Low')
plt.bar(prop_dep_high['race_recoded'], prop_dep_high['dep_binary'], bottom=prop_dep_low['dep_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))

model = ols('DOWN ~ C(race_recoded) + C(EGENDER) + C(race_recoded):C(EGENDER)', data=phase1_cleaned_dep).fit()
sm.stats.anova_lm(model, typ=2)

phase1_cleaned=phase1[~phase1["WORRY"].isin([-99, -88])]
prop_worry_sex2 = phase1_cleaned.groupby("WORRY")["EGENDER"].apply(get_proportion, nums=2).reset_index()
prop_worry_sex2["name"]="female"
prop_worry_sex2
prop_worry_sex1 = phase1_cleaned.groupby("WORRY")["EGENDER"].apply(get_proportion, nums=1).reset_index()
prop_worry_sex1["name"]="male"
prop_worry_sex1

plt.bar(prop_worry_sex1['WORRY'], prop_worry_sex1['EGENDER'], label='Men')
plt.bar(prop_worry_sex2['WORRY'], prop_worry_sex2['EGENDER'], bottom=prop_worry_sex1['EGENDER'], label='Women')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase1_cleaned_worry=phase1[~phase1["WORRY"].isin([-99, -88])]
females_worry = phase1_cleaned_worry[phase1_cleaned_worry["EGENDER"] == 2]["WORRY"].values
males_worry = phase1_cleaned_worry[phase1_cleaned_worry["EGENDER"] == 1]["WORRY"].values
stats.ttest_ind(females_worry, males_worry)

phase1_cleaned=phase1[~phase1["INTEREST"].isin([-99, -88])]
prop_interest_sex2 = phase1_cleaned.groupby("INTEREST")["EGENDER"].apply(get_proportion, nums=2).reset_index()
prop_interest_sex2["name"]="female"
prop_interest_sex2
prop_interest_sex1 = phase1_cleaned.groupby("INTEREST")["EGENDER"].apply(get_proportion, nums=1).reset_index()
prop_interest_sex1["name"]="male"
prop_interest_sex1

plt.bar(prop_interest_sex1['INTEREST'], prop_interest_sex1['EGENDER'], label='Men')
plt.bar(prop_interest_sex2['INTEREST'], prop_interest_sex2['EGENDER'], bottom=prop_interest_sex1['EGENDER'], label='Women')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase1_cleaned_int=phase1[~phase1["INTEREST"].isin([-99, -88])]
females_int = phase1_cleaned_int[phase1_cleaned_int["EGENDER"] == 2]["INTEREST"].values
males_int = phase1_cleaned_int[phase1_cleaned_int["EGENDER"] == 1]["INTEREST"].values
stats.ttest_ind(females_int, males_int)

phase1_cleaned_anxiety=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
phase1_cleaned_anxiety["anxiety_binary"] = np.where(phase1_cleaned_anxiety["ANXIOUS"].isin([1, 2]), 1, 2)

prop_anxiety_high = phase1_cleaned_anxiety.groupby("race_recoded")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
prop_anxiety_high["name"]="high"
prop_anxiety_low = phase1_cleaned_anxiety.groupby("race_recoded")["anxiety_binary"].apply(get_proportion, nums=1).reset_index()
prop_anxiety_low["name"]="low"
prop_anxiety_low

plt.bar(prop_anxiety_low['race_recoded'], prop_anxiety_low['anxiety_binary'], label='Low')
plt.bar(prop_anxiety_high['race_recoded'], prop_anxiety_high['anxiety_binary'], bottom=prop_anxiety_low['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))

race1=phase1_cleaned_anxiety[phase1_cleaned_anxiety["race_recoded"]==1]["ANXIOUS"].values
race2=phase1_cleaned_anxiety[phase1_cleaned_anxiety["race_recoded"]==2]["ANXIOUS"].values
race3=phase1_cleaned_anxiety[phase1_cleaned_anxiety["race_recoded"]==3]["ANXIOUS"].values
race4=phase1_cleaned_anxiety[phase1_cleaned_anxiety["race_recoded"]==4]["ANXIOUS"].values
race5=phase1_cleaned_anxiety[phase1_cleaned_anxiety["race_recoded"]==5]["ANXIOUS"].values



stats.f_oneway(race1,race2,race3,race4,race5)

import statsmodels.api as sm
from statsmodels.formula.api import ols

#perform two-way ANOVA
model = ols('ANXIOUS ~ C(race_recoded) + C(EGENDER) + C(race_recoded):C(EGENDER)', data=phase1_cleaned_anxiety).fit()
sm.stats.anova_lm(model, typ=2)

#phase1_cleaned_anxiety=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
#phase1_cleaned_anxiety["anxiety_binary"] = np.where(phase1_cleaned_anxiety["ANXIOUS"].isin([1, 2]), 1, 2)
prop_anxiety_df=phase1_cleaned_anxiety.groupby("EST_ST")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
prop_anxiety_df.columns=["state","proportion = 2 (high anxiety)"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 2 (high anxiety)", data=prop_anxiety_df)

phase1_year_anxiety=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
phase1_year_anxiety["anxiety_binary"] = np.where(phase1_year_anxiety["ANXIOUS"].isin([1, 2]), 1, 2)
phase1_year_anxiety["generation"] = np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1920,1945]), "silent",
                                      np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1946,1964]), "baby",
                                                np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1965,1979]),"gen x",
                                                 np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1980,2000]), "millenial", "gen z"))))

phase1_year_anxiety=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
phase1_year_anxiety["generation"] = np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1920,1945]), 1,
                                      np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1946,1964]), 2,
                                                np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1965,1979]),3,
                                                 np.where(phase1_year_anxiety["TBIRTH_YEAR"].isin([1980,2000]), 4, 5))))

gen1=phase1_year_anxiety[phase1_year_anxiety["generation"]==1]["ANXIOUS"].values
gen2=phase1_year_anxiety[phase1_year_anxiety["generation"]==2]["ANXIOUS"].values
gen3=phase1_year_anxiety[phase1_year_anxiety["generation"]==3]["ANXIOUS"].values
gen4=phase1_year_anxiety[phase1_year_anxiety["generation"]==4]["ANXIOUS"].values
gen5=phase1_year_anxiety[phase1_year_anxiety["generation"]==5]["ANXIOUS"].values

stats.f_oneway(gen1,gen2,gen3,gen4,gen5)

phase1_year_dep=phase1[~phase1["DOWN"].isin([-99, -88])]
phase1_year_dep["dep_binary"] = np.where(phase1_year_dep["DOWN"].isin([1, 2]), 1, 2)
phase1_year_dep["generation"] = np.where(phase1_year_dep["TBIRTH_YEAR"].isin([1920,1945]), 1,
                                      np.where(phase1_year_dep["TBIRTH_YEAR"].isin([1946,1964]), 2,
                                                np.where(phase1_year_dep["TBIRTH_YEAR"].isin([1965,1979]),3,
                                                 np.where(phase1_year_dep["TBIRTH_YEAR"].isin([1980,2000]), 4, 5))))

gen1d=phase1_year_dep[phase1_year_dep["generation"]==1]["DOWN"].values
gen2d=phase1_year_dep[phase1_year_dep["generation"]==2]["DOWN"].values
gen3d=phase1_year_dep[phase1_year_dep["generation"]==3]["DOWN"].values
gen4d=phase1_year_dep[phase1_year_dep["generation"]==4]["DOWN"].values
gen5d=phase1_year_dep[phase1_year_dep["generation"]==5]["DOWN"].values

stats.f_oneway(gen1d,gen2d,gen3d,gen4d,gen5d)

prop_year_a_high = phase1_year_anxiety.groupby("generation")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
prop_year_a_high["name"]="high"
prop_year_a_low = phase1_year_anxiety.groupby("generation")["anxiety_binary"].apply(get_proportion, nums=1).reset_index()
prop_year_a_low["name"]="low"
prop_year_a_low

plt.bar(prop_year_a_low['generation'], prop_year_a_low['anxiety_binary'], label='Low')
plt.bar(prop_year_a_high['generation'], prop_year_a_high['anxiety_binary'], bottom=prop_year_a_low['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))

prop_year_a_high = phase1_year_dep.groupby("generation")["dep_binary"].apply(get_proportion, nums=2).reset_index()
prop_year_a_high["name"]="high"
prop_year_a_low = phase1_year_dep.groupby("generation")["dep_binary"].apply(get_proportion, nums=1).reset_index()
prop_year_a_low["name"]="low"
prop_year_a_low

plt.bar(prop_year_a_low['generation'], prop_year_a_low['dep_binary'], label='Low')
plt.bar(prop_year_a_high['generation'], prop_year_a_high['dep_binary'], bottom=prop_year_a_low['dep_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))

silent = phase1_year_anxiety[phase1_year_anxiety["generation"]=="silent"]["ANXIOUS"].values
baby = phase1_year_anxiety[phase1_year_anxiety["generation"]=="baby"]["ANXIOUS"].values
genx = phase1_year_anxiety[phase1_year_anxiety["generation"]=="genx"]["ANXIOUS"].values
millenial = phase1_year_anxiety[phase1_year_anxiety["generation"]=="millenial"]["ANXIOUS"].values
genz= phase1_year_anxiety[phase1_year_anxiety["generation"]=="genz"]["ANXIOUS"].values

stats.f_oneway(silent,baby,genx,millenial,genz)

#phase1["anxiety_ternary"] = np.where(phase1["ANXIOUS"] == 1, "low anxiety",
                                     #np.where(phase1["ANXIOUS"].isin([2, 3]), "medium anxiety", "high anxiety"))

phase1_cleaned=phase1[~phase1["ANXIOUS"].isin([-99, -88])]
phase1_cleaned_gov=phase1_cleaned[~phase1_cleaned["EST_ST"].isin([11])]
phase1_cleaned_gov["GOVPARTY"] = np.where(phase1_cleaned_gov["EST_ST"].isin([1,2,4,5,12,13,16,18,19,24,25,28,29,31,33,38,39,40,45,46,47,48,49,54,56]), "republican", "democratic")
phase1_cleaned_gov

prop_anxiety_govR = phase1_cleaned_gov.groupby("ANXIOUS")["GOVPARTY"].apply(get_proportion, nums="republican").reset_index()
prop_anxiety_govR["name"]="republican"
prop_anxiety_govR
prop_anxiety_govD= phase1_cleaned_gov.groupby("ANXIOUS")["GOVPARTY"].apply(get_proportion, nums="democratic").reset_index()
prop_anxiety_govR["name"]="democratic"
prop_anxiety_govD

plt.bar(prop_anxiety_govR['ANXIOUS'], prop_anxiety_govR['GOVPARTY'], label='Republican')
plt.bar(prop_anxiety_govD['ANXIOUS'], prop_anxiety_govD['GOVPARTY'], bottom=prop_anxiety_govR['GOVPARTY'], label='Democrat')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase1_cleaned_gov
democratic = phase1_cleaned_gov[phase1_cleaned_gov["GOVPARTY"] == "democratic"]["ANXIOUS"].values
republican = phase1_cleaned_gov[phase1_cleaned_gov["GOVPARTY"] == "republican"]["ANXIOUS"].values
stats.ttest_ind(democratic, republican)

sns.histplot(x=democratic, color="blue")
sns.histplot(x=republican, color="red")
plt.show()

"""### Region


"""

phase1["region"] = np.where(phase1["EST_ST"].isin([23, 50, 44, 9, 36, 34, 42]), 1,
                            np.where(phase1["EST_ST"].isin([39, 26, 18, 55, 17, 27, 19, 29, 38, 46, 31, 20]), 2,
                                     np.where(phase1["EST_ST"].isin([10, 24, 51, 54, 21, 37, 45, 47, 13, 12, 1, 28, 5, 22, 48, 40]), 3, 4)))

phase1_region_anx=phase1[~phase1["ANXIOUS"].isin([-99,-88])]

northeast=phase1_region_anx[phase1_region_anx["region"]==1]["ANXIOUS"].values
midwest=phase1_region_anx[phase1_region_anx["region"]==2]["ANXIOUS"].values
south=phase1_region_anx[phase1_region_anx["region"]==3]["ANXIOUS"].values
west=phase1_region_anx[phase1_region_anx["region"]==4]["ANXIOUS"].values

stats.f_oneway(northeast, midwest, south, west)

phase1_region_dep=phase1[~phase1["DOWN"].isin([-99,-88])]
northeastd=phase1_region_dep[phase1_region_dep["region"]==1]["DOWN"].values
midwestd=phase1_region_dep[phase1_region_dep["region"]==2]["DOWN"].values
southd=phase1_region_dep[phase1_region_dep["region"]==3]["DOWN"].values
westd=phase1_region_dep[phase1_region_dep["region"]==4]["DOWN"].values

stats.f_oneway(northeastd, midwestd, southd, westd)

"""### Two-way ANOVA"""

model = ols('ANXIOUS ~ C(region) + C(EGENDER) + C(region):C(EGENDER)', data=phase1_region_anx).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('DOWN ~ C(region) + C(EGENDER) + C(region):C(EGENDER)', data=phase1_region_dep).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('ANXIOUS ~ C(region) + C(generation) + C(region):C(generation)', data=phase1_year_anxiety).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('DOWN ~ C(region) + C(generation) + C(region):C(generation)', data=phase1_year_dep).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('ANXIOUS ~ C(race_recoded) + C(generation) + C(race_recoded):C(generation)', data=phase1_year_anxiety).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('DOWN ~ C(race_recoded) + C(generation) + C(race_recoded):C(generation)', data=phase1_year_dep).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('ANXIOUS ~ C(EGENDER) + C(generation) + C(EGENDER):C(generation)', data=phase1_year_anxiety).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('DOWN ~ C(EGENDER) + C(generation) + C(EGENDER):C(generation)', data=phase1_year_dep).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('DOWN ~ C(race_recoded) + C(region) + C(race_recoded):C(region)', data=phase1_region_dep).fit()
sm.stats.anova_lm(model, typ=2)

model = ols('ANXIOUS ~ C(race_recoded) + C(region) + C(race_recoded):C(region)', data=phase1_region_anx).fit()
sm.stats.anova_lm(model, typ=2)

"""## Phase 3"""

phase3_cleaned=phase3[~phase3["ANXIOUS"].isin([-99, -88])]
phase3_cleaned["anxiety_binary"] = np.where(phase3_cleaned["ANXIOUS"].isin([1, 2]), 1, 2)
phase3_cleaned=phase3_cleaned[~phase3_cleaned["RECVDVACC"].isin([-99, -88])]

prop_vac_no = phase3_cleaned.groupby("ANXIOUS")["RECVDVACC"].apply(get_proportion, nums=2).reset_index()
prop_vac_no["name"]="not recieved"
prop_vac_yes = phase3_cleaned.groupby("ANXIOUS")["RECVDVACC"].apply(get_proportion, nums=1).reset_index()
prop_vac_yes["name"]="recieved"
prop_vac_yes

plt.bar(prop_vac_yes['ANXIOUS'], prop_vac_yes["RECVDVACC"], label='Recieved')
plt.bar(prop_vac_no['ANXIOUS'], prop_vac_no["RECVDVACC"], bottom=prop_vac_yes["RECVDVACC"], label='Not recieved')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase3_cleaned=phase3[~phase3["ANXIOUS"].isin([-99, -88])]
phase3_cleaned_dose=phase3_cleaned[~phase3_cleaned["DOSES"].isin([-99, -88])]

prop_dose_no = phase3_cleaned_dose.groupby("ANXIOUS")["DOSES"].apply(get_proportion, nums=2).reset_index()
prop_dose_no["name"]="not planned"
prop_dose_yes = phase3_cleaned_dose.groupby("ANXIOUS")["DOSES"].apply(get_proportion, nums=1).reset_index()
prop_dose_yes["name"]="planned"
prop_dose_yes

plt.bar(prop_dose_yes['ANXIOUS'], prop_dose_yes["DOSES"], label='Planned')
plt.bar(prop_dose_no['ANXIOUS'], prop_dose_no["DOSES"], bottom=prop_dose_yes["DOSES"], label='Not planned')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase3_cleaned_get=phase3_cleaned[~phase3_cleaned["GETVACC"].isin([-99, -88])]
phase3_cleaned_get["anxiety_binary"] = np.where(phase3_cleaned_get["ANXIOUS"].isin([1, 2]), 1, 2)
prop_getvacc_high=phase3_cleaned_get.groupby("GETVACC")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
prop_getvacc_high["name"]="high"
prop_getvacc_low=phase3_cleaned_get.groupby("GETVACC")["anxiety_binary"].apply(get_proportion, nums=1).reset_index()
prop_getvacc_low["name"]="low"

plt.bar(prop_getvacc_low["GETVACC"], prop_getvacc_low['anxiety_binary'], label='Low')
plt.bar(prop_getvacc_high["GETVACC"], prop_getvacc_high['anxiety_binary'], bottom=prop_getvacc_low['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))

phase3_id_count = phase3.groupby("EST_ST")["SCRAM"].nunique().reset_index()

plt.figure(figsize=(12, 3))
sns.barplot(x="EST_ST", y="SCRAM", data=phase3_id_count)
plt.xticks(rotation=90)
plt.xlabel("state")
plt.ylabel("number of unique IDs")
# plt.tight_layout()
plt.show()

prop3_race1=phase3.groupby("EST_ST")["RRACE"].apply(get_proportion, nums=1).reset_index()
prop3_race1.columns=["state","proportion = 1"]
plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="proportion = 1", data=prop3_race1)

sns.countplot(x="RRACE", hue="EGENDER",  data=phase3, palette=sns.color_palette("Set2", phase3["EGENDER"].nunique()))
plt.xlabel("race")
plt.ylabel("number of respondents")
plt.show()

sns.countplot(x="REGION", hue="RRACE",  data=phase3, palette=sns.color_palette("Set2", phase3["RRACE"].nunique()))
plt.xlabel("region")
plt.ylabel("number of respondents")
plt.show()

"""# Other"""

sns.histplot(x="TBIRTH_YEAR", hue="GETVACC",  data=phase3, bins=100, palette=sns.color_palette("Set2", phase3["GETVACC"].nunique()))
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

sns.histplot(x="TBIRTH_YEAR", hue="RECVDVACC",  data=phase3, bins=100, palette=sns.color_palette("Set2", phase3["RECVDVACC"].nunique()))
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

sns.histplot(x="TBIRTH_YEAR", hue="ANXIOUS",  data=phase1, bins=100, palette=sns.color_palette("Set2", phase1["ANXIOUS"].nunique()))
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

sns.histplot(x="TBIRTH_YEAR", hue="PRESCRIPT",  data=phase3, bins=100, palette=sns.color_palette("Set2", phase3["PRESCRIPT"].nunique()))
plt.xlabel("birth year")
plt.ylabel("number of respondents")
plt.show()

phase1["RRACE"].nunique()

phase1["EST_ST"].nunique()

phase2["EST_ST"].nunique()

phase3["EST_ST"].nunique()

phase3_1["EST_ST"].nunique()

phase3_2["TBIRTH_YEAR"].min()

"""# COVID-19 Rates"""

history = pd.read_csv(f"{base_dir}/Data/all_states.csv")
history

history=history[~history['state'].isin(['AS','GU','MP','PR','VI'])]

week_converter=pd.read_csv(f"{base_dir}/Data/week_convertor.csv")
week_converter

plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="positive", data=df)
plt.xticks(rotation=90)
plt.xlabel("state")
plt.ylabel("number of cases")
# plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 3))
sns.barplot(x="state", y="positive", data=history[history['date'].isin(["2020-05-05"])])
plt.xticks(rotation=90)
plt.xlabel("state")
plt.ylabel("number of cases")
# plt.tight_layout()
plt.show()

history["date"] = pd.to_datetime(history["date"])

week_converter["Start"] = pd.to_datetime(week_converter["Start"])
week_converter["End"] = pd.to_datetime(week_converter["End"])

week_dictionary = {}

for i, row in week_converter.iterrows():
    week_dictionary[row["Week Number"]] = (row["Start"], row["End"])

history = history[history["date"] >= week_converter["Start"].min()]
history = history[history["date"] <= week_converter["End"].max()]

week_history_list = []

for i, row in history.iterrows():
    week_number = 0
    history_date = row["date"]

    for week in week_dictionary:
        week_converter_start = week_dictionary[week][0]
        week_converter_end = week_dictionary[week][1]

        if history_date >= week_converter_start and history_date <= week_converter_end:
            week_number = week
            break


    week_history_list.append(week_number)

history["week_number"] = week_history_list
history = history[history["week_number"] >= 1]

history

"""## Covid Plots"""

avg_n_cases=history.groupby("week_number")["negativeIncrease"].mean().reset_index()
avg_n_cases

plt.plot(avg_n_cases['week_number'], avg_n_cases['negativeIncrease'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Negative Cases', fontsize=14)
plt.grid(True)
plt.show()

high_anxiety_phases["avg_n_cases"]=avg_n_cases["negativeIncrease"]

sns.lmplot(x="avg_n_cases", y="anxiety_binary", data=high_anxiety_phases)

model = sm.GLM.from_formula("anxiety_binary ~ avg_n_cases", data=high_anxiety_phases)
result = model.fit()
result.summary()

avg_p_cases=history.groupby("week_number")["positiveIncrease"].mean().reset_index()
avg_p_cases

plt.plot(avg_p_cases['week_number'], avg_p_cases['positiveIncrease'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Positive Cases', fontsize=14)
plt.grid(True)
plt.show()

avg_positive_cases=history.groupby("week_number")["positive"].mean().reset_index()
avg_positive_cases

plt.plot(avg_positive_cases['week_number'], avg_positive_cases['positive'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Positive Cases', fontsize=14)
plt.grid(True)
plt.show()

avg_current_hospitalizations=history.groupby("week_number")["hospitalizedCurrently"].mean().reset_index()
avg_current_hospitalizations

plt.plot(avg_current_hospitalizations['week_number'], avg_current_hospitalizations['hospitalizedCurrently'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Current Hospitalizations', fontsize=14)
plt.grid(True)
plt.show()

high_anxiety_phases["avg_current_hospitalizations"]=avg_current_hospitalizations["hospitalizedCurrently"]

sns.lmplot(x="avg_current_hospitalizations", y="anxiety_binary", data=high_anxiety_phases)

model = sm.GLM.from_formula("anxiety_binary ~ avg_current_hospitalizations", data=high_anxiety_phases)
result = model.fit()
result.summary()

avg_total_hospitalizations=history.groupby("week_number")["hospitalized"].mean().reset_index()
avg_total_hospitalizations

plt.plot(avg_total_hospitalizations['week_number'], avg_total_hospitalizations['hospitalized'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Total Hospitalizations', fontsize=14)
plt.grid(True)
plt.show()

avg_death=history.groupby("week_number")["death"].mean().reset_index()
avg_death

plt.plot(avg_death['week_number'], avg_death['death'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Total Deaths', fontsize=14)
plt.grid(True)
plt.show()

avg_neg_cases=history.groupby("week_number")["negative"].mean().reset_index()
avg_neg_cases

plt.plot(avg_neg_cases['week_number'], avg_neg_cases['negative'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Negative Cases', fontsize=14)
plt.grid(True)
plt.show()

avg_totalTestResults=history.groupby("week_number")["totalTestResults"].mean().reset_index()
avg_totalTestResults

plt.plot(avg_totalTestResults['week_number'], avg_totalTestResults['totalTestResults'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Total Tests Results', fontsize=14)
plt.grid(True)
plt.show()

covid_phases = map_phases[map_phases["WEEK"]<=26]
covid_phases

covid_phases=pd.concat([covid_phases[["SCRAM","WEEK", "EST_ST", "TBIRTH_YEAR", "EGENDER", "RHISPANIC", "RRACE", "ANXIOUS", "WORRY", "DOWN", "INTEREST", "week_number"]]],ignore_index=True, axis=0)

covid_phases=covid_phases[~covid_phases["ANXIOUS"].isin([-99, -88])]

covid_phases["anxiety_binary"] = np.where(covid_phases["ANXIOUS"].isin([1, 2]), 1, 2)

covid_phases=covid_phases[~covid_phases["DOWN"].isin([-99, -88])]
covid_phases["dep_binary"] = np.where(covid_phases["DOWN"].isin([1, 2]), 1, 2)

covid_high_a = covid_phases.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
covid_high_a["name"]="high"
covid_low_a=covid_phases.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=1).reset_index()
covid_low_a["name"]="low"

plt.bar(covid_low_a['week_number'], covid_low_a['anxiety_binary'], label='Low')
plt.bar(covid_high_a['week_number'], covid_high_a['anxiety_binary'], bottom=covid_low_a['anxiety_binary'], label='High')
avg_positive_cases['positive'].plot(kind='line', marker='d', secondary_y=True, color='red')
plt.legend(bbox_to_anchor=(1.1, 1.05))

plt.bar(covid_low_a['week_number'], covid_low_a['anxiety_binary'], label='Low')
plt.bar(covid_high_a['week_number'], covid_high_a['anxiety_binary'], bottom=covid_low_a['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))
avg_totalTestResults['totalTestResults'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_a['week_number'], covid_low_a['anxiety_binary'], label='Low')
plt.bar(covid_high_a['week_number'], covid_high_a['anxiety_binary'], bottom=covid_low_a['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))
avg_neg_cases['negative'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_a['week_number'], covid_low_a['anxiety_binary'], label='Low')
plt.bar(covid_high_a['week_number'], covid_high_a['anxiety_binary'], bottom=covid_low_a['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))
avg_death['death'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_a['week_number'], covid_low_a['anxiety_binary'], label='Low')
plt.bar(covid_high_a['week_number'], covid_high_a['anxiety_binary'], bottom=covid_low_a['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))
avg_total_hospitalizations['hospitalized'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_a['week_number'], covid_low_a['anxiety_binary'], label='Low')
plt.bar(covid_high_a['week_number'], covid_high_a['anxiety_binary'], bottom=covid_low_a['anxiety_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))
avg_current_hospitalizations['hospitalizedCurrently'].plot(kind='line', marker='d', secondary_y=True, color='red')

covid_high_d = covid_phases.groupby("week_number")["dep_binary"].apply(get_proportion, nums=2).reset_index()
covid_high_d["name"]="high"
covid_low_d=covid_phases.groupby("week_number")["dep_binary"].apply(get_proportion, nums=1).reset_index()
covid_low_d["name"]="low"

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
plt.legend(bbox_to_anchor=(1.1, 1.05))

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
avg_positive_cases['positive'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
avg_current_hospitalizations['hospitalizedCurrently'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
avg_total_hospitalizations['hospitalized'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
avg_totalTestResults['totalTestResults'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
avg_neg_cases['negative'].plot(kind='line', marker='d', secondary_y=True, color='red')

plt.bar(covid_low_d['week_number'], covid_low_d['dep_binary'], label='Low')
plt.bar(covid_high_d['week_number'], covid_high_d['dep_binary'], bottom=covid_low_d['dep_binary'], label='High')
avg_death['death'].plot(kind='line', marker='d', secondary_y=True, color='red')

female_covid=covid_phases[covid_phases["EGENDER"].isin([2])]
male_covid=covid_phases[covid_phases["EGENDER"].isin([1])]

female_covid_higha = female_covid.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
female_covid_higha["name"]="high"
female_covid_lowa=female_covid.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=1).reset_index()
female_covid_lowa["name"]="low"

male_covid_higha = male_covid.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
male_covid_higha["name"]="high"
male_covid_lowa=male_covid.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=1).reset_index()
male_covid_lowa["name"]="low"

plt.bar(female_covid_higha['week_number'], female_covid_higha['anxiety_binary'], label='High')
plt.bar(female_covid_lowa['week_number'], female_covid_lowa['anxiety_binary'], bottom=female_covid_higha['anxiety_binary'], label='Low')
plt.legend(bbox_to_anchor=(1.1, 1.05))

female_covid_df=female_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()

sns.relplot(x="week_number", y="ANXIOUS", data=female_covid_df);

male_covid_df=male_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()
sns.relplot(x="week_number", y="ANXIOUS", data=male_covid_df);

sns.relplot(x="week_number", y="ANXIOUS", data=female_covid_df);
avg_positive_cases['positive'].plot(kind='line', marker='d', secondary_y=True, color='red')

sns.relplot(x="week_number", y="ANXIOUS", data=male_covid_df);
avg_positive_cases['positive'].plot(kind='line', marker='d', secondary_y=True, color='red')

female_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_positive_cases['positive'].plot(kind='line', marker='d', secondary_y=True, color='red')
plt.legend(bbox_to_anchor=(1.1, 1.05))

male_covid_df['ANXIOUS'].plot(kind='line', marker='d',color='blue')
avg_positive_cases['positive'].plot(kind='line', marker='d', secondary_y=True, color='red')
plt.legend(bbox_to_anchor=(1.1, 1.05))

female_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_totalTestResults['totalTestResults'].plot(kind='line', marker='d', secondary_y=True, color='red')
plt.legend(bbox_to_anchor=(1.1, 1.05))

male_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_totalTestResults['totalTestResults'].plot(kind='line', marker='d', secondary_y=True, color='red')
plt.legend(bbox_to_anchor=(1.1, 1.05))

female_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_current_hospitalizations['hospitalizedCurrently'].plot(kind='line', marker='d', secondary_y=True, color='red')

male_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_current_hospitalizations['hospitalizedCurrently'].plot(kind='line', marker='d', secondary_y=True, color='red')

female_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_death['death'].plot(kind='line', marker='d', secondary_y=True, color='red')

male_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_death['death'].plot(kind='line', marker='d', secondary_y=True, color='red')

female_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_neg_cases['negative'].plot(kind='line', marker='d', secondary_y=True, color='red')

male_covid_df['ANXIOUS'].plot(kind='line', marker='d', color='blue')
avg_neg_cases['negative'].plot(kind='line', marker='d', secondary_y=True, color='red')

female_covid_df_d=female_covid.groupby('week_number')['DOWN'].mean().reset_index()
male_covid_df_d=male_covid.groupby('week_number')['DOWN'].mean().reset_index()

female_covid_df_d['DOWN'].plot(kind='line', marker='d', color='blue')

male_covid_df_d['DOWN'].plot(kind='line', marker='d', color='blue')

covid_phases["race_recoded"] = np.where(covid_phases["RHISPANIC"] == 2, 5, covid_phases["RRACE"])

pd.crosstab(index=covid_phases['race_recoded'], columns=covid_phases['ANXIOUS'])

pd.crosstab(index=covid_phases['race_recoded'], columns=covid_phases['DOWN'])

race1_covid=covid_phases[covid_phases["race_recoded"].isin([1])]
race2_covid=covid_phases[covid_phases["race_recoded"].isin([2])]
race3_covid=covid_phases[covid_phases["race_recoded"].isin([3])]
race4_covid=covid_phases[covid_phases["race_recoded"].isin([4])]
race5_covid=covid_phases[covid_phases["race_recoded"].isin([5])]

race1_adf=race1_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()
race2_adf=race2_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()
race3_adf=race3_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()
race4_adf=race4_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()
race5_adf=race5_covid.groupby('week_number')['ANXIOUS'].mean().reset_index()

race1_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

race2_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

race3_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

race4_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

race5_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

race1_ddf=race1_covid.groupby('week_number')['DOWN'].mean().reset_index()
race2_ddf=race2_covid.groupby('week_number')['DOWN'].mean().reset_index()
race3_ddf=race3_covid.groupby('week_number')['DOWN'].mean().reset_index()
race4_ddf=race4_covid.groupby('week_number')['DOWN'].mean().reset_index()
race5_ddf=race5_covid.groupby('week_number')['DOWN'].mean().reset_index()

race1_ddf['DOWN'].plot(kind='line', marker='d', color='blue')

race2_ddf['DOWN'].plot(kind='line', marker='d', color='blue')

race3_ddf['DOWN'].plot(kind='line', marker='d', color='blue')

race4_ddf['DOWN'].plot(kind='line', marker='d', color='blue')

race5_ddf['DOWN'].plot(kind='line', marker='d', color='blue')

covid_phases["generation"] = np.where(covid_phases["TBIRTH_YEAR"].isin([1920,1945]), 1,
                                      np.where(covid_phases["TBIRTH_YEAR"].isin([1946,1964]), 2,
                                                np.where(covid_phases["TBIRTH_YEAR"].isin([1965,1979]),3,
                                                 np.where(covid_phases["TBIRTH_YEAR"].isin([1980,2000]), 4, 5))))

gen1=covid_phases[covid_phases["generation"].isin([1])]
gen2=covid_phases[covid_phases["generation"].isin([2])]
gen3=covid_phases[covid_phases["generation"].isin([3])]
gen4=covid_phases[covid_phases["generation"].isin([4])]
gen5=covid_phases[covid_phases["generation"].isin([5])]

gen1_adf=gen1.groupby('week_number')['ANXIOUS'].mean().reset_index()
gen2_adf=gen2.groupby('week_number')['ANXIOUS'].mean().reset_index()
gen3_adf=gen3.groupby('week_number')['ANXIOUS'].mean().reset_index()
gen4_adf=gen4.groupby('week_number')['ANXIOUS'].mean().reset_index()
gen5_adf=gen5.groupby('week_number')['ANXIOUS'].mean().reset_index()

gen1_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

gen2_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

gen3_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

gen4_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

gen5_adf['ANXIOUS'].plot(kind='line', marker='d', color='blue')

"""# Vaccination"""

vaccination= pd.read_csv(f"{base_dir}/Data/owid-covid-data.csv")

vaccination["date"] = pd.to_datetime(vaccination["date"])

vaccination=vaccination[vaccination['iso_code'].isin(['USA'])]
vaccination

vaccination = vaccination[vaccination["date"] >= week_converter["Start"].min()]
vaccination = vaccination[vaccination["date"] <= week_converter["End"].max()]

week_vac_list = []

for i, row in vaccination.iterrows():
    week_number = 0
    vaccination_date = row["date"]

    for week in week_dictionary:
        week_converter_start = week_dictionary[week][0]
        week_converter_end = week_dictionary[week][1]

        if vaccination_date >= week_converter_start and vaccination_date <= week_converter_end:
            week_number = week
            break


    week_vac_list.append(week_number)

vaccination["week_number"] = week_vac_list
vaccination = vaccination[vaccination["week_number"] >= 1]

avg_new_vaccinations=vaccination.groupby("week_number")["new_vaccinations"].mean().reset_index()
avg_new_vaccinations

plt.plot(avg_new_vaccinations['week_number'], avg_new_vaccinations['new_vaccinations'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('New Vaccinations', fontsize=14)
plt.grid(True)
plt.show()

avg_positive_rate=vaccination.groupby("week_number")["positive_rate"].mean().reset_index()
avg_positive_rate

plt.plot(avg_positive_rate['week_number'], avg_positive_rate['positive_rate'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Positive Rate', fontsize=14)
plt.grid(True)
plt.show()

avg_positive_cases=vaccination.groupby("week_number")["new_cases"].mean().reset_index()
avg_positive_cases

plt.plot(avg_positive_cases['week_number'], avg_positive_cases['new_cases'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Positive Cases', fontsize=14)
plt.grid(True)
plt.show()

avg_death=vaccination.groupby("week_number")["new_deaths"].mean().reset_index()
avg_death

plt.plot(avg_death['week_number'], avg_death['new_deaths'], color='red', marker='o')
plt.xlabel('Week Number', fontsize=14)
plt.ylabel('Deaths', fontsize=14)
plt.grid(True)
plt.show()

"""## General Anxiety"""

phases=map_phases

phases=phases[~phases["ANXIOUS"].isin([-99,-88])]

phases["anxiety_binary"] = np.where(phases["ANXIOUS"].isin([1, 2]), 1, 2)

phases=phases[~phases["DOWN"].isin([-99,-88])]
phases["dep_binary"] = np.where(phases["DOWN"].isin([1, 2]), 1, 2)

high_anxiety_phases = phases.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
high_anxiety_phases

high_anxiety_phases["avg_positive_cases"]=avg_positive_cases['new_cases']
high_anxiety_phases

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=high_anxiety_phases)

model_high_anxiety = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=high_anxiety_phases)
result = model_high_anxiety.fit()
result.summary()

high_anxiety_phases["avg_deaths"]=avg_death['new_deaths']
high_anxiety_phases

sns.lmplot(x="avg_deaths", y="anxiety_binary", data=high_anxiety_phases)

model_deaths = sm.GLM.from_formula("anxiety_binary ~ avg_deaths", data=high_anxiety_phases)
result = model_deaths.fit()
result.summary()

high_anxiety_phases["avg_new_vaccinations"]=avg_new_vaccinations['new_vaccinations']
high_anxiety_phases

sns.lmplot(x="avg_new_vaccinations", y="anxiety_binary", data=high_anxiety_phases)

model_vac = sm.GLM.from_formula("anxiety_binary ~ avg_new_vaccinations", data=high_anxiety_phases)
result = model_vac.fit()
result.summary()

vaccination_anxiety=high_anxiety_phases[~high_anxiety_phases["avg_new_vaccinations"].isin(["NaN"])]
vaccination_anxiety

sns.lmplot(x="avg_new_vaccinations", y="anxiety_binary", data=vaccination_anxiety)

model = sm.GLM.from_formula("anxiety_binary ~ avg_new_vaccinations", data=high_anxiety_phases)
result = model.fit()
result.summary()

high_anxiety_phases

"""## General Depression"""

high_depression_phases = phases.groupby("week_number")["dep_binary"].apply(get_proportion, nums=2).reset_index()

high_depression_phases["avg_positive_cases"]=avg_positive_cases['new_cases']
high_depression_phases["avg_deaths"]=avg_death['new_deaths']
high_depression_phases["avg_new_vaccinations"]=avg_new_vaccinations['new_vaccinations']
high_depression_phases["avg_n_cases"]=avg_n_cases['negativeIncrease']
high_depression_phases['avg_current_hospitalizations']=avg_current_hospitalizations['hospitalizedCurrently']

sns.lmplot(x="avg_positive_cases", y="dep_binary", data=high_depression_phases)

model = sm.GLM.from_formula("dep_binary ~ avg_positive_cases", data=high_depression_phases)
result = model.fit()
result.summary()

sns.lmplot(x="avg_current_hospitalizations", y="dep_binary", data=high_depression_phases)

model = sm.GLM.from_formula("dep_binary ~ avg_current_hospitalizations", data=high_depression_phases)
result = model.fit()
result.summary()

sns.lmplot(x="avg_n_cases", y="dep_binary", data=high_depression_phases)

model = sm.GLM.from_formula("dep_binary ~ avg_n_cases", data=high_depression_phases)
result = model.fit()
result.summary()

sns.lmplot(x="avg_new_vaccinations", y="dep_binary", data=high_depression_phases)

model = sm.GLM.from_formula("dep_binary ~ avg_new_vaccinations", data=high_depression_phases)
result = model.fit()
result.summary()

sns.lmplot(x="avg_deaths", y="dep_binary", data=high_depression_phases)

model = sm.GLM.from_formula("dep_binary ~ avg_deaths", data=high_depression_phases)
result = model.fit()
result.summary()

"""## Gender Anxiety"""

female_phases=phases[phases["EGENDER"].isin([2])]
female_phases

female_high_anxiety = female_phases.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
female_high_anxiety

male_phases=phases[phases["EGENDER"].isin([1])]
male_phases

male_high_anxiety = male_phases.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
male_high_anxiety

female_high_anxiety["avg_positive_cases"]=avg_positive_cases['new_cases']
female_high_anxiety["avg_deaths"]=avg_death['new_deaths']
female_high_anxiety["avg_new_vaccinations"]=avg_new_vaccinations['new_vaccinations']
female_high_anxiety["avg_n_cases"]=avg_n_cases['negativeIncrease']
female_high_anxiety['avg_current_hospitalizations']=avg_current_hospitalizations['hospitalizedCurrently']

male_high_anxiety["avg_positive_cases"]=avg_positive_cases['new_cases']
male_high_anxiety["avg_deaths"]=avg_death['new_deaths']
male_high_anxiety["avg_new_vaccinations"]=avg_new_vaccinations['new_vaccinations']
male_high_anxiety["avg_n_cases"]=avg_n_cases['negativeIncrease']
male_high_anxiety['avg_current_hospitalizations']=avg_current_hospitalizations['hospitalizedCurrently']

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=female_high_anxiety)

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=female_high_anxiety)
result = model.fit()
result.summary()

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=male_high_anxiety)

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=male_high_anxiety)
result = model.fit()
result.summary()

sns.lmplot(x="avg_deaths", y="anxiety_binary", data=female_high_anxiety)

model = sm.GLM.from_formula("anxiety_binary ~ avg_deaths", data=female_high_anxiety)
result = model.fit()
result.summary()

sns.lmplot(x="avg_deaths", y="anxiety_binary", data=male_high_anxiety)

model = sm.GLM.from_formula("anxiety_binary ~ avg_deaths", data=male_high_anxiety)
result = model.fit()
result.summary()

sns.lmplot(x="avg_new_vaccinations", y="anxiety_binary", data=female_high_anxiety)

sns.lmplot(x="avg_new_vaccinations", y="anxiety_binary", data=male_high_anxiety)

sns.lmplot(x="avg_n_cases", y="anxiety_binary", data=female_high_anxiety)

sns.lmplot(x="avg_n_cases", y="anxiety_binary", data=male_high_anxiety)

sns.lmplot(x="avg_current_hospitalizations", y="anxiety_binary", data=female_high_anxiety)

sns.lmplot(x="avg_current_hospitalizations", y="anxiety_binary", data=male_high_anxiety)

"""## Race Anxiety


"""

phases["race_recoded"]=np.where(phases["RHISPANIC"] == 2, 5, phases["RRACE"])

race1_anxiety=phases[phases["race_recoded"].isin([1])]
race2_anxiety=phases[phases["race_recoded"].isin([2])]
race3_anxiety=phases[phases["race_recoded"].isin([3])]
race4_anxiety=phases[phases["race_recoded"].isin([4])]
race5_anxiety=phases[phases["race_recoded"].isin([5])]

high_anxiety_race1 = race1_anxiety.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
high_anxiety_race2 = race2_anxiety.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
high_anxiety_race3 = race3_anxiety.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
high_anxiety_race4 = race4_anxiety.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()
high_anxiety_race5 = race5_anxiety.groupby("week_number")["anxiety_binary"].apply(get_proportion, nums=2).reset_index()

def relationshipDf (df):
  df["avg_positive_cases"]=avg_positive_cases['new_cases']
  df["avg_deaths"]=avg_death['new_deaths']
  df["avg_new_vaccinations"]=avg_new_vaccinations['new_vaccinations']
  df["avg_n_cases"]=avg_n_cases['negativeIncrease']
  df['avg_current_hospitalizations']=avg_current_hospitalizations['hospitalizedCurrently']

relationshipDf(high_anxiety_race1)
relationshipDf(high_anxiety_race2)
relationshipDf(high_anxiety_race3)
relationshipDf(high_anxiety_race4)
relationshipDf(high_anxiety_race5)

high_anxiety_race1

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=high_anxiety_race1)

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=high_anxiety_race2)

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=high_anxiety_race3)

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=high_anxiety_race4)

sns.lmplot(x="avg_positive_cases", y="anxiety_binary", data=high_anxiety_race5)

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=high_anxiety_race1)
result = model.fit()
result.summary()

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=high_anxiety_race2)
result = model.fit()
result.summary()

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=high_anxiety_race3)
result = model.fit()
result.summary()

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=high_anxiety_race4)
result = model.fit()
result.summary()

model = sm.GLM.from_formula("anxiety_binary ~ avg_positive_cases", data=high_anxiety_race5)
result = model.fit()
result.summary()

"""# GeoPandas"""

map = f"{base_dir}/Data/s_11au16/s_11au16.shp"
usa = gpd.read_file(map)

usa = usa.iloc[:-1, :]

usa = usa[~usa["NAME"].isin(["Northern Marianas", "Virgin Islands", "Guam", "Puerto Rico", "American Samoa", "Hawaii", "Alaska"])]

usa

map_phases=pd.concat([phase1[["SCRAM","WEEK", "EST_ST", "TBIRTH_YEAR", "EGENDER", "RHISPANIC", "RRACE", "ANXIOUS", "WORRY", "DOWN", "INTEREST", "week_number"]], phase2[["SCRAM","WEEK", "EST_ST", "TBIRTH_YEAR", "EGENDER", "RHISPANIC", "RRACE", "ANXIOUS", "WORRY", "DOWN", "INTEREST", "week_number"]]],ignore_index=True, axis=0)

phase3_2['EGENDER']=phase3_2['EGENID_BIRTH']

map_phases=pd.concat([map_phases, phase3[["SCRAM","WEEK", "EST_ST", "TBIRTH_YEAR", "EGENDER", "RHISPANIC", "RRACE", "ANXIOUS", "WORRY", "DOWN", "INTEREST", "week_number"]], phase3_1[["SCRAM","WEEK", "EST_ST", "TBIRTH_YEAR", "EGENDER", "RHISPANIC", "RRACE", "ANXIOUS", "WORRY", "DOWN", "INTEREST", "week_number"]], phase3_2[["SCRAM","WEEK", "EST_ST", "TBIRTH_YEAR", "EGENDER", "RHISPANIC", "RRACE", "ANXIOUS", "WORRY", "DOWN", "INTEREST", "week_number"]]],ignore_index=True, axis=0)

state_dictionary=pd.read_csv(f"{base_dir}/Data/state_dictionary.csv")
state_dictionary=state_dictionary[state_dictionary["EST_ST"]<57]
state_dictionary=state_dictionary.rename(columns={'Name': "NAME"})
state_dictionary

usa_with_states = usa.merge(state_dictionary, on="NAME")
usa_with_states

map_phases=map_phases[~map_phases["ANXIOUS"].isin([-99,-88])]

map_phases=map_phases[~map_phases["DOWN"].isin([-99,-88])]

map_anxiety=map_phases.groupby("EST_ST")["ANXIOUS"].mean().reset_index()
map_anxiety

usa_with_data = usa_with_states.merge(map_anxiety, on="EST_ST")
usa_with_data = usa_with_data.to_crs(epsg=3857)

usa_with_data.head()

fig, ax = plt.subplots(1, figsize=(10, 10))
usa_with_data.plot(column="ANXIOUS", cmap="Reds", linewidth=0.9, ax=ax, edgecolor='0.9', alpha=0.6, legend=True)
ctx.add_basemap(ax, source=ctx.providers.Stamen.TonerLite) # see https://contextily.readthedocs.io/en/latest/providers_deepdive.html
ax.axis("off")

map_depression=map_phases.groupby("EST_ST")["DOWN"].mean().reset_index()
map_depression

usa_with_data_d = usa_with_states.merge(map_depression, on="EST_ST")
usa_with_data_d = usa_with_data_d.to_crs(epsg=3857)

fig, ax = plt.subplots(1, figsize=(10, 10))
usa_with_data_d.plot(column="DOWN", cmap="Reds", linewidth=0.9, ax=ax, edgecolor='0.9', alpha=0.6, legend=True)
ctx.add_basemap(ax, source=ctx.providers.Stamen.TonerLite) # see https://contextily.readthedocs.io/en/latest/providers_deepdive.html
ax.axis("off")

"""# Machine Learning"""

machine_data=map_phases
machine_data

import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn import metrics
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.metrics import classification_report
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

pd.options.mode.chained_assignment = None  # default='warn'

sns.set(context='talk', style='white', rc={'figure.facecolor':'white'}, font_scale=1)
sns.set_style('ticks')

machine_data=machine_data[~machine_data["DOWN"].isin([-99, -88])]
machine_data=machine_data[~machine_data["ANXIOUS"].isin([-99, -88])]
machine_data

machine_data["anxiety_binary"] = np.where(machine_data["ANXIOUS"].isin([1, 2]), 0, 1)
machine_data["depression_binary"] = np.where(machine_data["DOWN"].isin([1, 2]), 0, 1)
machine_data["race_recoded"] = np.where(machine_data["RHISPANIC"] == 2, 5, machine_data["RRACE"])
machine_data

machine_data["region"] = np.where(machine_data["EST_ST"].isin([23, 50, 44, 9, 36, 34, 42]), 1,
                            np.where(machine_data["EST_ST"].isin([39, 26, 18, 55, 17, 27, 19, 29, 38, 46, 31, 20]), 2,
                                     np.where(machine_data["EST_ST"].isin([10, 24, 51, 54, 21, 37, 45, 47, 13, 12, 1, 28, 5, 22, 48, 40]), 3, 4)))

machine_data["generation"] = np.where(machine_data["TBIRTH_YEAR"].isin([1920,1945]), 1,
                                      np.where(machine_data["TBIRTH_YEAR"].isin([1946,1964]), 2,
                                                np.where(machine_data["TBIRTH_YEAR"].isin([1965,1979]),3,
                                                 np.where(machine_data["TBIRTH_YEAR"].isin([1980,2000]), 4, 5))))

sns.countplot(x="anxiety_binary", data=machine_data, color="lightblue")
plt.show()

sns.displot(x="TBIRTH_YEAR", data=machine_data, hue="depression_binary", palette=sns.color_palette("mako", 2))
plt.show()

sns.countplot(x="EGENDER", data=machine_data, palette=sns.color_palette("Blues", 2), hue="anxiety_binary")
plt.show()

machine_data_anx=machine_data[["DOWN","EST_ST","EGENDER","anxiety_binary","race_recoded","region","generation"]].copy()
machine_data_anx

machine_data.groupby("anxiety_binary")["TBIRTH_YEAR"].median()
machine_data.groupby(["anxiety_binary"])["EGENDER"].value_counts()
machine_data["anxiety_binary"].nunique()

Y = machine_data_anx[["anxiety_binary"]]
X = machine_data_anx.loc[:, machine_data_anx.columns != "anxiety_binary"]
X

x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, Y, stratify=Y, test_size=0.3, random_state=1)

sns.barplot(x=["x_train", "x_test", "y_train", "y_test"],
            y=[len(x_train), len(x_test), len(y_train), len(y_test)],
           color="blue")
plt.ylabel("count")
plt.show()

y_test["anxiety_binary"].value_counts(normalize=True)
y_train["anxiety_binary"].value_counts(normalize=True)

logit = LogisticRegression(solver="lbfgs", max_iter=10000)

x_train.values

logit.fit(x_train.values, y_train.values.reshape(-1,))

y_pred = logit.predict(x_test)
y_pred

cnf_matrix = metrics.confusion_matrix(y_test, y_pred)

sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu")
plt.xlabel("model prediction")
plt.ylabel("truth")
plt.show()

accuracy_score(y_test, y_pred)

"""## neural network"""

Y = machine_data_anx[["anxiety_binary"]].values
X = machine_data_anx.drop("anxiety_binary", axis=1).values

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3)

model = Sequential()
model.add(Dense(8, input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(4, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(4, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

opt = keras.optimizers.Adam(learning_rate=0.001)
model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=20,  validation_split=0.2, batch_size=32, verbose=1)

plt.plot(history.history["accuracy"], label="train")
plt.plot(history.history["val_accuracy"], label="validation")
plt.title("model accuracy")
plt.ylabel("accuracy")
plt.xlabel("epoch")
plt.legend(["train", "validation"], loc='upper left')
plt.show()

plt.plot(history.history["loss"], label="train")
plt.plot(history.history["val_loss"], label="validation")
plt.title("model loss")
plt.ylabel("loss")
plt.xlabel("epoch")
plt.legend(["train"], loc='upper left')
plt.show()

score = model.evaluate(x_test, y_test, verbose=0)
score

predictions = model.predict(x_test)
predictions.round(1)

np.rint(predictions)

confusion_matrix = sklearn.metrics.confusion_matrix(y_test, np.rint(predictions))

sns.heatmap(confusion_matrix, annot=True, cmap="YlGnBu")
plt.xlabel("model prediction")
plt.ylabel("truth")
plt.show()

!pip install shap

import shap

explainer = shap.KernelExplainer(model.predict, shap.sample(x_train, 100))
shap_values = explainer.shap_values(x_test, nsamples=100)

shap.initjs()

shap.force_plot(explainer.expected_value[0], shap_values[0][0,:],
                pd.DataFrame(x_test).iloc[0,:])

shap.force_plot(explainer.expected_value[2], shap_values[2], x_test)

shap.summary_plot(shap_values, X)

"""## Depression Machine Learning"""

machine_data_dep=machine_data[["ANXIOUS","EST_ST","EGENDER","depression_binary","race_recoded","region","generation"]].copy()
machine_data_dep

sns.countplot(x="depression_binary", data=machine_data, color="lightblue")
plt.show()

Y = machine_data_dep[["depression_binary"]]
X = machine_data_dep.loc[:, machine_data_dep.columns != "depression_binary"]
X

x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, Y, stratify=Y, test_size=0.3, random_state=1)

y_test["depression_binary"].value_counts(normalize=True)
y_train["depression_binary"].value_counts(normalize=True)

logit = LogisticRegression(solver="lbfgs", max_iter=10000)

x_train.values

logit.fit(x_train.values, y_train.values.reshape(-1,))

y_pred = logit.predict(x_test)
y_pred

cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu")
plt.xlabel("model prediction")
plt.ylabel("truth")
plt.show()

accuracy_score(y_test, y_pred)

x_test["true"] = y_test["depression_binary"]
x_test["predicted"] = y_pred

x_test["correct"] = np.where(x_test["true"] == x_test["predicted"], True, False)

sns.countplot(x="correct", data=x_test, hue="EGENDER", palette=sns.color_palette("Blues", 2))
plt.show()

sns.countplot(x="correct", data=x_test, hue="race_recoded", palette=sns.color_palette("Blues", 5))
plt.show()

sns.countplot(x="correct", data=x_test, hue="ANXIOUS", palette=sns.color_palette("Blues", 4))
plt.show()

sns.countplot(x="correct", data=x_test, hue="region", palette=sns.color_palette("Blues", 4))
plt.show()

sns.countplot(x="correct", data=x_test, hue="generation", palette=sns.color_palette("Blues", 4))
plt.show()

sns.displot(x="WEEK", hue="correct", data=x_test, palette=sns.color_palette("mako", 2))
plt.show()



"""dep neural network"""

Y = machine_data_dep[["depression_binary"]].values
X = machine_data_dep.drop("depression_binary", axis=1).values
X

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

model = Sequential()
model.add(Dense(8, input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=15,  validation_split=0.2, batch_size=10, verbose=1)

plt.plot(history.history["accuracy"], label="train")
plt.plot(history.history["val_accuracy"], label="validation")
plt.title("model accuracy")
plt.ylabel("accuracy")
plt.xlabel("epoch")
plt.legend(["train", "validation"], loc='upper left')
plt.show()

plt.plot(history.history["loss"], label="train")
plt.plot(history.history["val_loss"], label="validation")
plt.title("model loss")
plt.ylabel("loss")
plt.xlabel("epoch")
plt.legend(["train"], loc='upper left')
plt.show()

score = model.evaluate(x_test, y_test, verbose=0)
score

predictions = model.predict(x_test)
predictions.round(1)

np.rint(predictions)

confusion_matrix = sklearn.metrics.confusion_matrix(y_test, np.rint(predictions))

sns.heatmap(confusion_matrix, annot=True, cmap="YlGnBu")
plt.xlabel("model prediction")
plt.ylabel("truth")
plt.show()